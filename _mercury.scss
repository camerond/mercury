// Mercury.scss
// version 0.1.5
// github.com/camerond/mercury

// Options

$site-width-max: 1400px !default;
$site-width-mid: 800px !default;
$site-width-narrow: 480px !default;

$site-height-mid: 800px !default;
$site-height-short: 480px !default;

$scaleToViewportHeight: false !default;

$svg-rendering: 'geometricPrecision' !default;

// Responsive mixins

@mixin media($minOrMax, $width, $height) {
  @if ($scaleToViewportHeight != false) {
    @media screen and (#{$minOrMax}-width: #{$width}), (#{$minOrMax}-height: #{$height}) {
      @content;
    }
  } @else {
    @media screen and (#{$minOrMax}-width: #{$width}) {
      @content;
    }
  }
}

@mixin min-width($width, $height) {
  @include media(min, $width, $height) {
    @content;
  }
}

@mixin max-width($width, $height) {
  @include media(max, $width, $height) {
    @content;
  }
}

@mixin tablet {
  @include max-width($site-width-mid, $site-height-mid) {
    @content;
  }
}

@mixin mobile {
  @include max-width($site-width-narrow, $site-height-short) {
    @content;
  }
}

@mixin max {
  @include max-width($site-width-max) {
    @content;
  }
}

@mixin max-vw($attr, $vw) {
  @include max {
    #{$attr}: ($vw/100) * $site-width-max;
  }
}

@mixin responsive($attr, $full, $mid:false, $narrow:false) {
  #{$attr}: #{$full};
  @if $mid {
    @include tablet {
      #{$attr}: #{$mid};
    }
  }
  @if $narrow {
    @include mobile {
      #{$attr}: #{$narrow};
    }
  }
}

// Simple mixins for hiding/showing print-only styles

@mixin print {
  @media print {
    @content;
  }
}

@mixin hide-print {
  @media print {
    display: none !important;
  }
}

// SVG background support
// (string encoding functions via http://codepen.io/jakob-e/pen/doMoML)

$svg-images: () !global;

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
    str-replace(str-slice($string, $index +
    str-length($search)), $search, $replace);
  }
  @return $string;
}

@function svg-encode($svg){
  $encoded:'';
  $slice: 200;
  $index: 0;
  $loops: ceil(str-length($svg)/$slice);
  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    $chunk: str-replace($chunk,'"','\'');
    $chunk: str-replace($chunk,'<','%3C');
    $chunk: str-replace($chunk,'>','%3E');
    $chunk: str-replace($chunk,'&','%26');
    $chunk: str-replace($chunk,'#','%23');
    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}

@function svg-url($name, $fill: '', $rendering: $svg-rendering, $preserveaspectratio: 'defer') {
  $icon: map-get($svg-images, $name);
  $width: map-get($icon, width);
  $height: map-get($icon, height);

  $path: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 #{$width} #{$height}' width='#{$width}px' height='#{$height}px' preserveAspectRatio='#{$preserveaspectratio}' shape-rendering='#{$rendering}'><g fill='#{$fill}'>#{map-get($icon, path)}</g></svg>";

  @return svg-encode($path);
}

@mixin register-svg($name, $width, $height, $path) {
  $new-icon: (
    $name: (
      width: $width,
      height: $height,
      path: $path
    )
  );
  $svg-images: map-merge($svg-images, ($new-icon)) !global;
}

// Clearfix

@mixin clearfix {
  &:after {
    content: "";
    clear: both;
    display: block;
    height: 0;
    overflow: hidden;
    visibility: hidden;
  }
}

// Hide Text

@mixin hide-text {
  overflow: hidden;
  text-indent: 101%;
  white-space: nowrap;
}
